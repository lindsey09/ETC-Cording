//화살표 함수 let이나 const로 시작
const add(파라메타 설정값) => { 하고싶은 동작}
1. const add = (a, b) =>{
  return a + b;
}
2. const add = (a, b) => a + b;
1번과 2번은 같은 내용, 1번을 간단하게 줄이면 2번

const sum = add(3, 4);
console.log(sum);

const hello = (name) => {
  console.log(`hello ${name}!!!`);
};

hello("lindsey");


*-----------------------------------------------------------*

//객체
const dog = {
  name : '멈',
  age : '3',
  cute : true,
  sample : {
    a : 1,
    b : 2,
  }
}


const dog = {
  name: "멈",
  age: "3"
};
console.log(dog);
console.log(dog.name);
console.log(dog.age);


//객체
const ironMan = {
  name: "토니스타크",
  actor: "로버트 다우니 주니어",
  alias: "아이언맨"
};

const captainAmerica = {
  name: "스티븐로저스",
  actor: "크리스에반스",
  alias: "캡틴아메리카"
};

function print(hero) {
  const text = `${hero.name}(${hero.alias})의 역할을 맡은 배우는 ${hero.actor} 입니다.`;
  console.log(text);
}

print(ironMan);
print(captainAmerica);

객체를 함수로 만들어서 사용할 수도 있음.

//${hero.name}을 조금 더 간단하게 사용하려면
//비구조화 할당,  객체 구조분해  객체내에서 값을 추출해 냄 (특정값을 객체 내에서 빼온다!! 라고 생각하면 된다.)
function print(hero) {
  const { name, alias, actor } = hero;
  const text = `${name}(${alias})의 역할을 맡은 배우는 ${actor} 입니다.`;
  console.log(text);
}

//파라메타 자리에도 넣을 수 있음
function print({ name, alias, actor }) {
  const text = `${name}(${alias})의 역할을 맡은 배우는 ${actor} 입니다.`;
  console.log(text);
}

//함수내부에서 사용할 필요는 없음, 외부에서도 사용 가능
const {name} = iconMan;
console.log(name); 할 경우 "토니스타크" 출력




print(ironMan);
print(captainAmerica);

